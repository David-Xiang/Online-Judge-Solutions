/*
 * @lc app=leetcode.cn id=2311 lang=cpp
 *
 * [2311] Longest Binary Subsequence Less Than or Equal to K
 */

#include <iostream>
#include <set>
#include <vector>

using namespace std;

// @lc code=start
class Solution {
public:
    int longestSubsequence(string s, int k) {
        set<int> del_set;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '1' && check(s, del_set, k)) {
                del_set.emplace(i);
            }
        }
        return s.size() - del_set.size();
    }
    int check(string s, set<int> &del_set, int k) {
        cout << "check start" << endl;
        int len = s.size();
        int acc = 0;
        int pow = 1;
        for (int i = 0; i < len; ++i) {
            if (s[len - i - 1] == '1' &&
                del_set.find(len - i - 1) == del_set.end()) {
                acc += pow;
                if (acc > k) {
                    return 1;
                }
            }
            pow = min(pow * 2, 1000000001);
        }
        return 0; // <= k
    }
};
// @lc code=end

int main() {
    cout << Solution().longestSubsequence("1001010", 5) << endl;
    cout << Solution().longestSubsequence("00101001", 1) << endl;
    cout
        << Solution().longestSubsequence(
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111111111"
               "111111111111111111111111111111111111111111111111111111111110000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "000000000000000000000000000000000000000000000000000000000000000"
               "0000000000000000000000000000000000000000000000000000000",
               1000000000)
        << endl;
    return 0;
}
